class ASTGenerator
  attr_accessor :types, :base_name
  attr_reader :indent_level

  def initialize
    @indent_level = 0
  end

  def generate
    File.open(output_file, "w") do |file|
      @file = file

      write_line "package ca.eddieantonio.lox;"
      write_empty_line
      write_line "import java.util.List;"
      write_empty_line

      write_line "// AUTOGENERATED FILE: DO NOT MODIFY!"
      write_line "abstract class #{base_name} {"
      indent

      generate_visitor
      generate_types
      write_empty_line

      # The base accept() method:
      write_line "abstract <T> T accept(Visitor<T> visitor);"

      unindent
      write_line "}"
    end
  end

  def generate_types
    types.each_pair do  |class_name, fields|
      write_empty_line

      write_line "static class #{class_name} extends #{base_name} {"
      indent

      # Fields
      fields.each do |field|
        write_line "final #{field};"
      end
      write_empty_line

      # Constructor
      write_line "#{class_name}(#{fields.join(', ')}) {"
      indent
      fields.each do |field|
        _type, name = field.split()
        write_line "this.#{name} = #{name};"
      end
      unindent
      write_line "}"

      write_empty_line

      # Method definitions
      write_line "@Override"
      write_line "<T> T accept(Visitor<T> visitor) {"
      indent
      write_line "return visitor.visit#{class_name}#{base_name}(this);"
      unindent
      write_line "}"

      unindent
      write_line "}"
    end
  end

  def generate_visitor
    write_line "interface Visitor<T> {"
    indent

    types.each_key do |type_name|
      write_line "T visit#{type_name}#{base_name}(#{type_name} #{base_name.downcase});"
    end

    unindent
    write_line "}"
  end

  # Derived properties/field names

  def base_visitor
    "#{base_name}Visitor"
  end

  def output_file
    "#{ARGV[0]}/#{base_name}.java"
  end

  # Utilities

  def write_line line
    spaces = " " * (4 * indent_level)
    write_line! spaces + line
  end

  def write_empty_line
    write_line!
  end

  def indent
    @indent_level += 1
  end

  def unindent
    fail "cannot unindent further" if @indent_level == 0
    @indent_level -= 1
  end

  def write_line! string = ""
    @file.write "#{string}\n"
  end

  class << self
    def define(&block)
      generator = self.new
      block.call(generator)
      generator.generate
    end
  end
end
