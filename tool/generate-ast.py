#!/usr/bin/env python3

import argparse
from pathlib import Path

parser = argparse.ArgumentParser()
parser.add_argument("output_dir", type=Path)


def define_ast(output_dir: Path, base_name: str, types: list[str]):
    path = output_dir / f"{base_name}.java"

    with path.open(mode="w", encoding="UTF-8") as file:
        file.write("package ca.eddieantonio.lox;\n")
        file.write("\n")
        file.write("import java.util.List;\n")
        file.write("\n")
        file.write(f"// AUTOGENERATED FILE: DO NOT MODIFY!\n")
        file.write(f"abstract class {base_name} {{\n")

        for type_definition in types:
            file.write("\n")
            define_type(file, type_definition)

        file.write("}\n")


def define_type(file, type_definition: str):
    class_name, _colon, field_definitions = type_definition.partition(":")
    class_name = class_name.strip()

    field_definitions = field_definitions.strip()

    fields = [parse_field(f) for f in field_definitions.split(",")]

    file.write(f"    static class {class_name} extends Expr {{\n")

    # Fields:
    for field_type, field_name in fields:
        file.write(f"        final {field_type} {field_name};\n")
    file.write("\n")

    # Constructor
    file.write(f"        {class_name}({field_definitions}) {{\n")
    for field_type, field_name in fields:
        file.write(f"            this.{field_name} = {field_name};\n")
    file.write("        }\n")

    file.write("    }\n")


def parse_field(field_definition: str) -> tuple[str, str]:
    field_type, field_name = field_definition.split()
    return field_type, field_name


if __name__ == "__main__":
    args = parser.parse_args()
    define_ast(
        args.output_dir,
        "Expr",
        [
            "Binary   : Expr left, Token operator, Expr right",
            "Grouping : Expr expression",
            "Literal  : Object value",
            "Unary    : Token operator, Expr right",
        ],
    )
